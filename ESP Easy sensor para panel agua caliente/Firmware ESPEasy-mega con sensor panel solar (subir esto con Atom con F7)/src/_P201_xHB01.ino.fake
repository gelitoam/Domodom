//#######################################################################################################
//######################## Plugin 201: Temperature and Level sensor  xHB01########################
//#######################################################################################################

#define PLUGIN_201
#define PLUGIN_ID_201         201
#define PLUGIN_NAME_201       "Environment - xHB01"
#define PLUGIN_VALUENAME1_201 "Temperature"
#define PLUGIN_VALUENAME2_201 "Level"

//uint8_t Plugin_201_DHT_Pin;

// Extracted from http://hack4life.pbworks.com/Arduino%20Solar%20Water%20Heater%20Sensor

#define TIMEOUT 50000
#define MARK_HEADER 7000
#define SPACE_HEADER 3000
#define MARK 600
#define SPACE_ONE 1600
#define SPACE_ZERO 600

int expectPulse(int val, int inPin){
  unsigned long t=micros();
  while(digitalRead(inPin)==val){
    if( (micros()-t)>TIMEOUT ) return 0;
  }
  return micros()-t;
}

// temp in celsious and level goes from 0 to 3
bool readTempNLevelSensor(char inPin, char &temp, char &level, byte &checksum){
   byte data[5]={0,0,0,0,0};
   unsigned long val1;
   unsigned long st=micros();
   val1 = expectPulse(HIGH, inPin);     //Mide un pico; si resulta ser un valle, dar치 un return muy breve que no cumple lo siguiente, y salta a return false
   if(val1>MARK_HEADER){         //Si hay un pico mayor que el pico de cabecera (si no, salta a return false)
     val1 = expectPulse(LOW, inPin);    //Lee un valle
     if(val1>SPACE_HEADER){      //Y si el valle es mayor que el valle de cabecera (si no, salta a return false)
       int c=39;
       for(;c>-1;c--){           //Comienza el bucle de lectura de 40 bits
         val1 = expectPulse(HIGH, inPin); //Lee un pico
         if(val1<MARK){            //Si el pico es m치s corto que MARK
          val1 = expectPulse(LOW, inPin);
          if(val1==0){             //Y el valle siguiente da timeout
            //Serial.println("Mark error 0");
            break;                //Error y para
          }
          if(val1<SPACE_ZERO){   //Si el valle es menos que un valle de "0" (600)
            //0
            //data[c>>3]|=(1<<(c & B111));
          }else if(val1<SPACE_ONE){ //Si no, si es m치s peque침o que un valle de "1" (1500)
            //1
            data[c>>3]|=(1<<(c & B111)); //Es un "1" y lo guarda (como la matriz ya estaba llena de ceros, no hace falta escribir un "0" si no es un "1")
          }else{
           //Serial.print(val1);Serial.println(" Space error");
           break;
          }
         }else{
          //Serial.println("Mark error");
          break;
         }
       }
       // Each reading should not take more than 70ms (use time to detect errors)
       if(micros()-st<70000){
         temp=data[3];
         level=data[2];
         checksum=data[0];
         //Serial.print(data[3]);Serial.print(" ");Serial.println((data[2]));
         //Serial.print(data[4],HEX);Serial.print(" ");Serial.print(data[3],HEX);Serial.print(" ");Serial.print(data[2],HEX);Serial.print(" ");Serial.print(data[1],HEX);Serial.print(" ");Serial.println(data[0],HEX);
         //Serial.println((216-temp-level),HEX);
         return true;
       }
    }
   }
   return false;
}

boolean Plugin_201(byte function, struct EventStruct *event, String& string)
{
  boolean success = false;



  switch (function)
  {
    case PLUGIN_DEVICE_ADD:
      {
        Device[++deviceCount].Number = PLUGIN_ID_201;
        Device[deviceCount].Type = DEVICE_TYPE_SINGLE;
        Device[deviceCount].VType = SENSOR_TYPE_TEMP_HUM;
        Device[deviceCount].Ports = 0;
        Device[deviceCount].PullUpOption = false;
        Device[deviceCount].InverseLogicOption = false;
        Device[deviceCount].FormulaOption = true;
        Device[deviceCount].ValueCount = 2;
        Device[deviceCount].SendDataOption = true;
        Device[deviceCount].TimerOption = true;
        Device[deviceCount].GlobalSyncOption = true;
        break;
      }

    case PLUGIN_GET_DEVICENAME:
      {
        string = F(PLUGIN_NAME_201);
        break;
      }

    case PLUGIN_GET_DEVICEVALUENAMES:
      {
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[0], PSTR(PLUGIN_VALUENAME1_201));
        strcpy_P(ExtraTaskSettings.TaskDeviceValueNames[1], PSTR(PLUGIN_VALUENAME2_201));
        break;
      }

    case PLUGIN_WEBFORM_LOAD:
      {
        /*const String options[] = { F("DHT 11"), F("DHT 22"), F("DHT 12") };
        int indices[] = { 11, 22, 12 };

        addFormSelector(string, F("DHT Type"), F("plugin_201_dhttype"), 3, options, indices, Settings.TaskDevicePluginConfig[event->TaskIndex][0] );
*/
        success = true;
        break;
      }

    case PLUGIN_WEBFORM_SAVE:
      {
      /*  Settings.TaskDevicePluginConfig[event->TaskIndex][0] = getFormItemInt(F("plugin_201_dhttype"));
*/
        success = true;
        break;
      }

    case PLUGIN_READ:
      {
/*
        byte dht_dat[5];
        byte dht_in;
        byte i;
        // byte Retry = 0;
        boolean error = false;

        byte Par3 = Settings.TaskDevicePluginConfig[event->TaskIndex][0];
        Plugin_201_DHT_Pin = Settings.TaskDevicePin1[event->TaskIndex];

        pinMode(Plugin_201_DHT_Pin, OUTPUT);
        // DHT start condition, pull-down i/o pin for 18ms
        digitalWrite(Plugin_201_DHT_Pin, LOW);              // Pull low
        delay(18);
        digitalWrite(Plugin_201_DHT_Pin, HIGH);             // Pull high
        delayMicroseconds(20); // was 40
        pinMode(Plugin_201_DHT_Pin, INPUT);                 // change pin to input
        delayMicroseconds(10);

        dht_in = digitalRead(Plugin_201_DHT_Pin);
        if (!dht_in)
        {
          delayMicroseconds(80);
          dht_in = digitalRead(Plugin_201_DHT_Pin);
          if (dht_in)
          {
            delayMicroseconds(80);                     // now ready for data reception
            for (i = 0; i < 5; i++)
            {
              byte data = Plugin_201_read_dht_dat();
              if (data != -1)
                dht_dat[i] = data;
              else
              {
                addLog(LOG_LEVEL_ERROR, F("DHT  : protocol timeout!"));
                error = true;
              }
            }

            if (!error)
            {

              // Checksum calculation is a Rollover Checksum by design!
              byte dht_check_sum = dht_dat[0] + dht_dat[1] + dht_dat[2] + dht_dat[3]; // check check_sum

              if (dht_dat[4] == dht_check_sum)
              {
                float temperature = NAN;
                float humidity = NAN;

                if (Par3 == 11)
                {
                  temperature = float(dht_dat[2]); // Temperature
                  humidity = float(dht_dat[0]); // Humidity
                }
                else if (Par3 == 12)
                {
                    temperature = float(dht_dat[2]*10 + (dht_dat[3] & 0x7f)) / 10.0; // Temperature
                    if (dht_dat[3] & 0x80) { temperature = -temperature; } // Negative temperature
                    humidity = float(dht_dat[0]*10+dht_dat[1]) / 10.0; // Humidity
                }

                if (Par3 == 22)
                {
                  if (dht_dat[2] & 0x80) // negative temperature
                    temperature = -0.1 * word(dht_dat[2] & 0x7F, dht_dat[3]);
                  else
                    temperature = 0.1 * word(dht_dat[2], dht_dat[3]);
                  humidity = word(dht_dat[0], dht_dat[1]) * 0.1; // Humidity
                }
                if (temperature != NAN || humidity != NAN) // According to negated original if, maybe use && instead?
                {
                  UserVar[event->BaseVarIndex] = temperature;
                  UserVar[event->BaseVarIndex + 1] = humidity;
                  String log = F("DHT  : Temperature: ");
                  log += UserVar[event->BaseVarIndex];
                  addLog(LOG_LEVEL_INFO, log);
                  log = F("DHT  : Humidity: ");
                  log += UserVar[event->BaseVarIndex + 1];
                  addLog(LOG_LEVEL_INFO, log);
                  success = true;
                }
              } // checksum
            } // error
          } // dht
        }  // !dht
        if(!success)
        {
          addLog(LOG_LEVEL_INFO, F("DHT  : No reading!"));
          UserVar[event->BaseVarIndex] = NAN;
          UserVar[event->BaseVarIndex + 1] = NAN;
        }
        break;
*/
      } //PLUGIN_READ
  }
  return success;
}


/*********************************************************************************************\
* DHT sub to get an 8 bit value from the receiving bitstream
\*********************************************************************************************/
/*
int Plugin_201_read_dht_dat(void)
{
  byte i = 0;
  byte result = 0;
  byte counter = 0;
  //noInterrupts();
  for (i = 0; i < 8; i++)
  {
    while ((!digitalRead(Plugin_201_DHT_Pin)) && (counter < 100))
    {
      delayMicroseconds(1);
      counter++;
    }
    if (counter >= 100)
    {
      //interrupts();
      return -1;
    }
    delayMicroseconds(30);
    if (digitalRead(Plugin_201_DHT_Pin))
      result |= (1 << (7 - i));
    counter = 0;
    while ((digitalRead(Plugin_201_DHT_Pin)) && (counter < 100))
    {
      delayMicroseconds(1);
      counter++;
    }
    if (counter >= 100)
    {
      //interrupts();
      return -1;
    }
  }
  //interrupts();
  return result;
}
*/
